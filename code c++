#include<stdio.h>

struct matrix{
	unsigned long long A , B , C , D;
}matrixIdentity, matrixFibo;

struct matrix multiply(matrix mat , matrix rix, int base){
		matrix result;

		result.A = ((mat.A * rix.A) + (mat.B * rix.C)) % base;
		result.B = ((mat.A * rix.B) + (mat.B * rix.D)) % base;
		result.C = ((mat.C * rix.A) + (mat.D * rix.C)) % base;
		result.D = ((mat.C * rix.B) + (mat.D * rix.D)) % base;
		
		return result;
}

struct matrix fibo(unsigned long long n, int base){
	
	if(n == 0)
		return matrixIdentity;

	if(n % 2 == 0){ // Even
		matrix sum = fibo(n/2,base);
		return multiply(sum,sum,base);
	}
	
	if(n % 2 == 1){ // Odd
		return multiply(matrixFibo,fibo(n-1,base),base);
	}
}

unsigned long long getResult(unsigned long long n, int base){
	return n % base;
}

int main(){
	
	unsigned long long n , countCase = 0;
	int base = 0;
	
	matrixIdentity.A = 1;	
	matrixIdentity.B = 0;
	matrixIdentity.C = 0;
	matrixIdentity.D = 1;
	
	matrixFibo.A = 1;
	matrixFibo.B = 1;
	matrixFibo.C = 1;
	matrixFibo.D = 0;
	
	while(scanf("%llu %d",&n,&base) != EOF)
	{	
		if(n == 0 && base == 0) break;
		countCase++;
		
		matrix resFibo = fibo(n-1,base);
		unsigned long long calls = 1;
			
			if(n > 1)
				calls = ((resFibo.A + resFibo.B + resFibo.C + resFibo.D + resFibo.C) - 1);
					
			if(calls == base || base == 1)
				printf("Case %llu: %llu %d 0\n",countCase,n,base);
			else if(calls < base)
				printf("Case %llu: %llu %d %llu\n",countCase,n,base,calls);
			else{
				printf("Case %llu: %llu %d %llu\n",countCase,n,base,getResult(calls,base));
			}
	}
	
	return 0;
}
